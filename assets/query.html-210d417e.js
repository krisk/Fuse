import{_ as i,M as e,p as u,q as d,N as a,V as t,R as n,t as s,a1 as p}from"./framework-a05dfeeb.js";const k={},h=p(`<h1 id="logical-query-operators" tabindex="-1"><a class="header-anchor" href="#logical-query-operators" aria-hidden="true">#</a> Logical Query Operators</h1><p>Fuse.js supports logical query operators. These operators are used for filtering the data and getting precise results based on the given conditions. The following table contains the logical query operators:</p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="#and">$and</a></td><td>Returns all documents that match the conditions of <strong>all</strong> clauses.</td></tr><tr><td><a href="#or">$or</a></td><td>Returns all documents that match the conditions of <strong>any</strong> clause.</td></tr></tbody></table><h2 id="and" tabindex="-1"><a class="header-anchor" href="#and" aria-hidden="true">#</a> <code>$and</code></h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span> <span class="token literal-property property">$and</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>expression_1<span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>expression_2<span class="token operator">&gt;</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>expression_N<span class="token operator">&gt;</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>$and</code> operator performs a logical <strong>AND</strong> operation on an array of expressions and selects the entries that satisfy all the expressions. The <code>$and</code> operator uses short-circuit evaluation (i.e, if the first expression evaluates to false, Fuse.js will not evaluate the remaining expressions).</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Fuse.js provides an implicit <strong>AND</strong> operation when specifying a comma separated list of expressions. Using an explicit <strong>AND</strong> with the <code>$and</code> operator is necessary when the same field or operator has to be specified in multiple expressions.</p></div><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> fuse<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">$and</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;xyz&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="or" tabindex="-1"><a class="header-anchor" href="#or" aria-hidden="true">#</a> <code>$or</code></h2><p>The <code>$or</code> operator performs a logical <strong>OR</strong> operation on an array expressions and selects the entries that satisfy at least one of the expressions. The <code>$or</code> operator uses short-circuit evaluation (i.e, if the first expression evaluates to true, Fuse.js will not evaluate the remaining expressions).</p><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> fuse<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">$or</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&#39;def&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="logical-search-with-dotted-keys" tabindex="-1"><a class="header-anchor" href="#logical-search-with-dotted-keys" aria-hidden="true">#</a> Logical search with dotted keys</h2><p>To handle keys that contain dots, you can use the <code>$path</code> and <code>$val</code> properties when building the query.</p><h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example</h4>`,16),m=n("div",{class:"language-json line-numbers-mode","data-ext":"json"},[n("pre",{class:"language-json"},[n("code",null,[n("span",{class:"token punctuation"},"["),s(`
  `),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},'"title"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},`"Old Man's War"`),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token property"},'"author"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"first.name"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"John"'),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token property"},'"last.name"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Scalzi"'),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token property"},'"age"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"61"'),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" options "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"useExtendedSearch"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"includeScore"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"keys"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token string"},"'title'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'author'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'first.name'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'author'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'last.name'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'author.age'"),s(`
  `),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"const"),s(" query "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"$and"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token literal-property property"},"$path"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'author'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'first.name'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token literal-property property"},"$val"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'jon'"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token literal-property property"},"$path"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'author'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'last.name'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token literal-property property"},"$val"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'scazi'"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("h2",{id:"use-with-extended-searching",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#use-with-extended-searching","aria-hidden":"true"},"#"),s(" Use with Extended Searching")],-1),g=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> fuse<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">$and</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;old war&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// Fuzzy &quot;old war&quot;</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;&#39;blue&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// Exact match for blue</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">$or</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;^lock&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// Starts with &quot;lock&quot;</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;!arts&#39;</span> <span class="token punctuation">}</span> <span class="token comment">// Does not have &quot;arts&quot;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function y(f,x){const o=e("Tab"),c=e("Tabs"),r=e("RouterLink"),l=e("Donate");return u(),d("div",null,[h,a(c,{events:[]},{default:t(()=>[a(o,{label:"List"},{default:t(()=>[m]),_:1}),a(o,{label:"JS"},{default:t(()=>[v]),_:1})]),_:1}),b,n("p",null,[s("Logical query operations pair quite nicely with "),a(r,{to:"/examples.html#extended-search"},{default:t(()=>[s("extended searching")]),_:1}),s(".")]),g,a(l)])}const j=i(k,[["render",y],["__file","query.html.vue"]]);export{j as default};
