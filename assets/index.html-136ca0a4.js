import{_ as p,M as e,p as r,q as c,N as a,R as s,t as n,V as u,a1 as d}from"./framework-a05dfeeb.js";const h={},m=s("h1",{id:"fuse-js",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#fuse-js","aria-hidden":"true"},"#"),n(" Fuse.js")],-1),k=s("p",null,[s("strong",null,"Powerful, lightweight fuzzy-search library, with zero dependencies"),n(".")],-1),v=d(`<h3 id="what-is-fuzzy-searching" tabindex="-1"><a class="header-anchor" href="#what-is-fuzzy-searching" aria-hidden="true">#</a> What is fuzzy searching?</h3><p>Generally speaking, fuzzy searching (more formally known as <em>approximate string matching</em>) is the technique of finding strings that are <em>approximately</em> equal to a given pattern (rather than <em>exactly</em>).</p><h3 id="why-should-i-use-it" tabindex="-1"><a class="header-anchor" href="#why-should-i-use-it" aria-hidden="true">#</a> Why should I use it?</h3><ul><li>With Fuse.js, you donâ€™t need to setup a dedicated backend just to handle search.</li><li>Simplicity and performance were the main criteria when developing this library.</li></ul><details class="custom-container details"><summary>As easy as 1, 2, 3</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. List of items to search in</span>
<span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Old Man&#39;s War&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Scalzi&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;The Lock Artist&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Steve&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Hamilton&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token comment">// 2. Set up the Fuse instance</span>
<span class="token keyword">const</span> fuse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fuse</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">keys</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;author.firstName&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 3. Now search!</span>
fuse<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">&#39;jon&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// Output:</span>
<span class="token comment">// [</span>
<span class="token comment">//   {</span>
<span class="token comment">//     item: {</span>
<span class="token comment">//       title: &quot;Old Man&#39;s War&quot;,</span>
<span class="token comment">//       author: {</span>
<span class="token comment">//         firstName: &#39;John&#39;,</span>
<span class="token comment">//         lastName: &#39;Scalzi&#39;</span>
<span class="token comment">//       }</span>
<span class="token comment">//     },</span>
<span class="token comment">//     refIndex: 0</span>
<span class="token comment">//   }</span>
<span class="token comment">// ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="when-should-i-use-it" tabindex="-1"><a class="header-anchor" href="#when-should-i-use-it" aria-hidden="true">#</a> When should I use It?</h3><p>It might not make sense for every situation, but can be ideal depending on your search requirements. For example:</p><ul><li>When you want client-side fuzzy searching of small to moderately large data sets.</li><li>When you can&#39;t justify setting up a dedicated backend simply to handle search. ElasticSearch or Algolia, although both great services, may be overkill for your particular use cases.</li></ul><h3 id="can-i-still-use-it-on-the-backend" tabindex="-1"><a class="header-anchor" href="#can-i-still-use-it-on-the-backend" aria-hidden="true">#</a> Can I still use it on the backend?</h3><p>Of course! Fuse.js has no DOM dependencies.</p><h3 id="who-s-using-fuse-js-these-days" tabindex="-1"><a class="header-anchor" href="#who-s-using-fuse-js-these-days" aria-hidden="true">#</a> Who&#39;s using Fuse.js these days?</h3>`,11),b={href:"https://www.npmjs.com/package/fuse.js?activeTab=dependents",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/krisk/Fuse/network/dependents",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/krisk/Fuse/stargazers",target:"_blank",rel:"noopener noreferrer"},g=s("hr",null,null,-1);function _(w,x){const i=e("Sponsors"),t=e("ExternalLinkIcon"),o=e("RouterLink"),l=e("Donate");return r(),c("div",null,[m,k,a(i),v,s("p",null,[n("Plenty of people. It's hard to say an exact number, since it's free. But a good indication is the number of "),s("a",b,[n("dependents"),a(t)]),n(" on NPM, and the "),s("a",y,[n("dependency graph"),a(t)]),n(" and "),s("a",f,[n("stargazers"),a(t)]),n(" on GitHub.")]),g,s("p",null,[n("Check out the "),a(o,{to:"/demo.html"},{default:u(()=>[n("live demo")]),_:1}),n(" to fiddle with it and to learn how to use it.")]),a(l)])}const j=p(h,[["render",_],["__file","index.html.vue"]]);export{j as default};
