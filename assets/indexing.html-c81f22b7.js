import{_ as i,M as e,p as l,q as u,N as a,V as t,R as n,t as s,a1 as r}from"./framework-a05dfeeb.js";const d={},k=n("h1",{id:"indexing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#indexing","aria-hidden":"true"},"#"),s(" Indexing")],-1),m=n("h3",{id:"fuse-createindex",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fuse-createindex","aria-hidden":"true"},"#"),s(),n("code",null,"Fuse.createIndex")],-1),v=n("p",null,"Pre-generate the index from the list, and pass it directly into the Fuse instance. If the list is (considerably) large, it speeds up instantiation.",-1),b=n("p",null,[n("strong",null,"Example")],-1),h=n("div",{class:"language-json line-numbers-mode","data-ext":"json"},[n("pre",{class:"language-json"},[n("code",null,[n("span",{class:"token punctuation"},"["),s(`
  `),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},'"title"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},`"Old Man's War"`),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token property"},'"author"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"firstName"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"John"'),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token property"},'"lastName"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Scalzi"'),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},'"title"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"The Lock Artist"'),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token property"},'"author"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"firstName"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Steve"'),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token property"},'"lastName"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Hamilton"'),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"/*...*/"),s(`
`),n("span",{class:"token punctuation"},"]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" options "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"keys"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'title'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'author.firstName'"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// Create the Fuse index"),s(`
`),n("span",{class:"token keyword"},"const"),s(" myIndex "),n("span",{class:"token operator"},"="),s(" Fuse"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createIndex"),n("span",{class:"token punctuation"},"("),s("options"),n("span",{class:"token punctuation"},"."),s("keys"),n("span",{class:"token punctuation"},","),s(" books"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},"// initialize Fuse with the index"),s(`
`),n("span",{class:"token keyword"},"const"),s(" fuse "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Fuse"),n("span",{class:"token punctuation"},"("),s("books"),n("span",{class:"token punctuation"},","),s(" options"),n("span",{class:"token punctuation"},","),s(" myIndex"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=r(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Fuse will automatically index the table if one isn&#39;t provided during instantiation.</p></div><h3 id="fuse-parseindex" tabindex="-1"><a class="header-anchor" href="#fuse-parseindex" aria-hidden="true">#</a> <code>Fuse.parseIndex</code></h3><p>Parses a serialized Fuse index from a json object representation.</p><p><strong>Example</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// (1) In the build step</span>
<span class="token comment">// Create the Fuse index</span>
<span class="token keyword">const</span> myIndex <span class="token operator">=</span> Fuse<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;author.firstName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> books<span class="token punctuation">)</span>
<span class="token comment">// Serialize and save it</span>
fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;fuse-index.json&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>myIndex<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// (2) When app starts</span>
<span class="token comment">// Load and deserialize index</span>
<span class="token keyword">const</span> fuseIndex <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fuse-index.json&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// Alternatively, if fetching the index, convert to json before parsing.</span>
<span class="token keyword">const</span> fuseIndex <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;./fuse-index.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> myIndex <span class="token operator">=</span> Fuse<span class="token punctuation">.</span><span class="token function">parseIndex</span><span class="token punctuation">(</span>fuseIndex<span class="token punctuation">)</span>
<span class="token comment">// initialize Fuse with the index</span>
<span class="token keyword">const</span> fuse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fuse</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> options<span class="token punctuation">,</span> myIndex<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function g(y,_){const o=e("Tab"),p=e("Tabs"),c=e("Donate");return l(),u("div",null,[k,m,v,b,a(p,{events:[]},{default:t(()=>[a(o,{label:"List"},{default:t(()=>[h]),_:1}),a(o,{label:"JS"},{default:t(()=>[f]),_:1})]),_:1}),x,a(c)])}const I=i(d,[["render",g],["__file","indexing.html.vue"]]);export{I as default};
