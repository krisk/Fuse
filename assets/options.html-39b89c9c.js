import{_ as l,M as d,p as s,q as h,R as o,t as e,N as t,V as i,Q as r,a1 as c}from"./framework-a05dfeeb.js";const u={},f=c('<h1 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h1><h2 id="basic-options" tabindex="-1"><a class="header-anchor" href="#basic-options" aria-hidden="true">#</a> Basic Options</h2><h3 id="iscasesensitive" tabindex="-1"><a class="header-anchor" href="#iscasesensitive" aria-hidden="true">#</a> <code>isCaseSensitive</code></h3><ul><li>Type: <code>boolean</code></li><li>Default: <code>false</code></li></ul><p>Indicates whether comparisons should be case sensitive.</p><h3 id="ignorediacritics" tabindex="-1"><a class="header-anchor" href="#ignorediacritics" aria-hidden="true">#</a> <code>ignoreDiacritics</code></h3><ul><li>Type: <code>boolean</code></li><li>Default: <code>false</code></li></ul><p>Indicates whether comparisons should ignore diacritics (accents).</p><h3 id="includescore" tabindex="-1"><a class="header-anchor" href="#includescore" aria-hidden="true">#</a> <code>includeScore</code></h3><ul><li>Type: <code>boolean</code></li><li>Default: <code>false</code></li></ul><p>Whether the score should be included in the result set. A score of <code>0</code>indicates a perfect match, while a score of <code>1</code> indicates a complete mismatch.</p><h3 id="includematches" tabindex="-1"><a class="header-anchor" href="#includematches" aria-hidden="true">#</a> <code>includeMatches</code></h3><ul><li>Type: <code>boolean</code></li><li>Default: <code>false</code></li></ul><p>Whether the matches should be included in the result set. When <code>true</code>, each record in the result set will include the indices of the matched characters. These can consequently be used for highlighting purposes.</p><h3 id="minmatchcharlength" tabindex="-1"><a class="header-anchor" href="#minmatchcharlength" aria-hidden="true">#</a> <code>minMatchCharLength</code></h3><ul><li>Type: <code>number</code></li><li>Default: <code>1</code></li></ul><p>Only the matches whose length exceeds this value will be returned. (For instance, if you want to ignore single character matches in the result, set it to <code>2</code>).</p><h3 id="shouldsort" tabindex="-1"><a class="header-anchor" href="#shouldsort" aria-hidden="true">#</a> <code>shouldSort</code></h3><ul><li>Type: <code>boolean</code></li><li>Default: <code>true</code></li></ul><p>Whether to sort the result list, by score.</p><h3 id="findallmatches" tabindex="-1"><a class="header-anchor" href="#findallmatches" aria-hidden="true">#</a> <code>findAllMatches</code></h3><ul><li>Type: <code>boolean</code></li><li>Default: <code>false</code></li></ul><p>When true, the matching function will continue to the end of a search pattern even if a perfect match has already been located in the string.</p><h3 id="keys" tabindex="-1"><a class="header-anchor" href="#keys" aria-hidden="true">#</a> <code>keys</code></h3><ul><li>Type: <code>Array</code></li><li>Default: <code>[]</code></li></ul>',25),p=o("h2",{id:"fuzzy-matching-options",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#fuzzy-matching-options","aria-hidden":"true"},"#"),e(" Fuzzy Matching Options")],-1),m=c('<h3 id="location" tabindex="-1"><a class="header-anchor" href="#location" aria-hidden="true">#</a> <code>location</code></h3><ul><li>Type: <code>number</code></li><li>Default: <code>0</code></li></ul><p>Determines approximately where in the text is the pattern expected to be found.</p><h3 id="threshold" tabindex="-1"><a class="header-anchor" href="#threshold" aria-hidden="true">#</a> <code>threshold</code></h3><ul><li>Type: <code>number</code></li><li>Default: <code>0.6</code></li></ul><p>At what point does the match algorithm give up. A threshold of <code>0.0</code> requires a perfect match (of both letters and location), a threshold of <code>1.0</code> would match anything.</p><h3 id="distance" tabindex="-1"><a class="header-anchor" href="#distance" aria-hidden="true">#</a> <code>distance</code></h3><ul><li>Type: <code>number</code></li><li>Default: <code>100</code></li></ul><p>Determines how close the match must be to the fuzzy location (specified by <code>location</code>). An exact letter match which is <code>distance</code> characters away from the fuzzy location would score as a complete mismatch. A <code>distance</code> of <code>0</code> requires the match be at the exact <code>location</code> specified. A distance of <code>1000</code> would require a perfect match to be within <code>800</code> characters of the <code>location</code> to be found using a <code>threshold</code> of <code>0.8</code>.</p><h3 id="ignorelocation" tabindex="-1"><a class="header-anchor" href="#ignorelocation" aria-hidden="true">#</a> <code>ignoreLocation</code></h3><ul><li>Type: <code>boolean</code></li><li>Default: <code>false</code></li></ul><p>When <code>true</code>, search will ignore <code>location</code> and <code>distance</code>, so it won&#39;t matter where in the string the pattern appears.</p>',12),g={class:"custom-container tip"},b=o("p",{class:"custom-container-title"},"TIP",-1),_=o("p",null,[e("The default options only search the first 60 characters. This should suffice if it is reasonably expected that the match is within this range. To modify this behavior, set the appropriate combination of "),o("code",null,"location"),e(", "),o("code",null,"threshold"),e(", "),o("code",null,"distance"),e(" (or "),o("code",null,"ignoreLocation"),e(").")],-1),y=o("h2",{id:"advanced-options",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#advanced-options","aria-hidden":"true"},"#"),e(" Advanced Options")],-1),x=o("h3",{id:"useextendedsearch",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#useextendedsearch","aria-hidden":"true"},"#"),e(),o("code",null,"useExtendedSearch")],-1),w=o("ul",null,[o("li",null,[e("Type: "),o("code",null,"boolean")]),o("li",null,[e("Default: "),o("code",null,"false")])],-1),T=o("code",null,"true",-1),v=c('<h3 id="getfn" tabindex="-1"><a class="header-anchor" href="#getfn" aria-hidden="true">#</a> <code>getFn</code></h3><ul><li>Type: <code>Function</code></li><li>Default: <code>(obj: T, path: string | string[]) =&gt; string | string[]</code></li></ul><p>The function to use to retrieve an object&#39;s value at the provided path. The default will also search nested paths.</p><h3 id="sortfn" tabindex="-1"><a class="header-anchor" href="#sortfn" aria-hidden="true">#</a> <code>sortFn</code></h3><ul><li>Type: <code>Function</code></li><li>Default: <code>(a, b) =&gt; number</code></li></ul><p>The function to use to sort all the results. The default will sort by ascending relevance score, ascending index.</p><h3 id="ignorefieldnorm" tabindex="-1"><a class="header-anchor" href="#ignorefieldnorm" aria-hidden="true">#</a> <code>ignoreFieldNorm</code></h3><ul><li>Type: <code>boolean</code></li><li>Default: <code>false</code></li></ul>',8),D=o("code",null,"true",-1),z=c('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The only time it makes sense to set <code>ignoreFieldNorm</code> to <code>true</code> is when it does not matter how many terms there are, but only that the query term exists.</p></div><h3 id="fieldnormweight" tabindex="-1"><a class="header-anchor" href="#fieldnormweight" aria-hidden="true">#</a> <code>fieldNormWeight</code></h3><ul><li>Type: <code>number</code></li><li>Default: <code>1</code></li></ul>',3),k=o("code",null,"0",-1),A=o("code",null,"0.5",-1),N=o("code",null,"2.0",-1);function W(F,q){const a=d("RouterLink"),n=d("Donate");return s(),h("div",null,[f,o("p",null,[e("List of keys that will be searched. This supports nested paths, weighted search, searching in arrays of "),t(a,{to:"/examples.html#search-string-array"},{default:i(()=>[e("strings")]),_:1}),e(" and "),t(a,{to:"/examples.html#nested-search"},{default:i(()=>[e("objects")]),_:1}),e(".")]),p,r(` ::: warning
You shouldn't have to change these.
::: `),m,o("div",g,[b,_,o("p",null,[e("To better understand how these options work together, read our "),t(a,{to:"/concepts/scoring-theory.html#scoring-theory"},{default:i(()=>[e("Scoring Theory")]),_:1}),e(".")])]),y,x,w,o("p",null,[e("When "),T,e(", it enables the use of unix-like search commands. See "),t(a,{to:"/examples.html#extended-search"},{default:i(()=>[e("example")]),_:1}),e(".")]),v,o("p",null,[e("When "),D,e(", the calculation for the relevance score (used for sorting) will ignore the "),t(a,{to:"/concepts/scoring-theory.html#fuzziness-score"},{default:i(()=>[e("field-length norm")]),_:1}),e(".")]),z,o("p",null,[e("Determines how much the "),t(a,{to:"/concepts/scoring-theory.html#field-length-norm"},{default:i(()=>[e("field-length norm")]),_:1}),e(" affects scoring. A value of "),k,e(" is equivalent to ignoring the field-length norm. A value of "),A,e(" will greatly reduce the effect of field-length norm, while a value of "),N,e(" will greatly increase it.")]),t(n)])}const L=l(u,[["render",W],["__file","options.html.vue"]]);export{L as default};
